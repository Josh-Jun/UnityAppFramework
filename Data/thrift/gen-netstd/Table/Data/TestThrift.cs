/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Table.Data
{

  public partial class TestThrift : TBase
  {
    private string _skuNo;
    private int _lanter_type;
    private int _isunique;
    private string _model_name;
    private int _flytime;
    private int _isdestroy;

    public int Id { get; set; }

    public string SkuNo
    {
      get
      {
        return _skuNo;
      }
      set
      {
        __isset.skuNo = true;
        this._skuNo = value;
      }
    }

    public int Lanter_type
    {
      get
      {
        return _lanter_type;
      }
      set
      {
        __isset.lanter_type = true;
        this._lanter_type = value;
      }
    }

    public int Isunique
    {
      get
      {
        return _isunique;
      }
      set
      {
        __isset.isunique = true;
        this._isunique = value;
      }
    }

    public string Model_name
    {
      get
      {
        return _model_name;
      }
      set
      {
        __isset.model_name = true;
        this._model_name = value;
      }
    }

    public int Flytime
    {
      get
      {
        return _flytime;
      }
      set
      {
        __isset.flytime = true;
        this._flytime = value;
      }
    }

    public int Isdestroy
    {
      get
      {
        return _isdestroy;
      }
      set
      {
        __isset.isdestroy = true;
        this._isdestroy = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool skuNo;
      public bool lanter_type;
      public bool isunique;
      public bool model_name;
      public bool flytime;
      public bool isdestroy;
    }

    public TestThrift()
    {
    }

    public TestThrift(int id) : this()
    {
      this.Id = id;
    }

    public TestThrift DeepCopy()
    {
      var tmp0 = new TestThrift();
      tmp0.Id = this.Id;
      if((SkuNo != null) && __isset.skuNo)
      {
        tmp0.SkuNo = this.SkuNo;
      }
      tmp0.__isset.skuNo = this.__isset.skuNo;
      if(__isset.lanter_type)
      {
        tmp0.Lanter_type = this.Lanter_type;
      }
      tmp0.__isset.lanter_type = this.__isset.lanter_type;
      if(__isset.isunique)
      {
        tmp0.Isunique = this.Isunique;
      }
      tmp0.__isset.isunique = this.__isset.isunique;
      if((Model_name != null) && __isset.model_name)
      {
        tmp0.Model_name = this.Model_name;
      }
      tmp0.__isset.model_name = this.__isset.model_name;
      if(__isset.flytime)
      {
        tmp0.Flytime = this.Flytime;
      }
      tmp0.__isset.flytime = this.__isset.flytime;
      if(__isset.isdestroy)
      {
        tmp0.Isdestroy = this.Isdestroy;
      }
      tmp0.__isset.isdestroy = this.__isset.isdestroy;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_id = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Id = await iprot.ReadI32Async(cancellationToken);
                isset_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                SkuNo = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Lanter_type = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Isunique = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Model_name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I32)
              {
                Flytime = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I32)
              {
                Isdestroy = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp1 = new TStruct("TestThrift");
        await oprot.WriteStructBeginAsync(tmp1, cancellationToken);
        var tmp2 = new TField();
        tmp2.Name = "id";
        tmp2.Type = TType.I32;
        tmp2.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
        await oprot.WriteI32Async(Id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((SkuNo != null) && __isset.skuNo)
        {
          tmp2.Name = "skuNo";
          tmp2.Type = TType.String;
          tmp2.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteStringAsync(SkuNo, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.lanter_type)
        {
          tmp2.Name = "lanter_type";
          tmp2.Type = TType.I32;
          tmp2.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI32Async(Lanter_type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.isunique)
        {
          tmp2.Name = "isunique";
          tmp2.Type = TType.I32;
          tmp2.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI32Async(Isunique, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Model_name != null) && __isset.model_name)
        {
          tmp2.Name = "model_name";
          tmp2.Type = TType.String;
          tmp2.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteStringAsync(Model_name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.flytime)
        {
          tmp2.Name = "flytime";
          tmp2.Type = TType.I32;
          tmp2.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI32Async(Flytime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.isdestroy)
        {
          tmp2.Name = "isdestroy";
          tmp2.Type = TType.I32;
          tmp2.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI32Async(Isdestroy, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TestThrift other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Id, other.Id)
        && ((__isset.skuNo == other.__isset.skuNo) && ((!__isset.skuNo) || (global::System.Object.Equals(SkuNo, other.SkuNo))))
        && ((__isset.lanter_type == other.__isset.lanter_type) && ((!__isset.lanter_type) || (global::System.Object.Equals(Lanter_type, other.Lanter_type))))
        && ((__isset.isunique == other.__isset.isunique) && ((!__isset.isunique) || (global::System.Object.Equals(Isunique, other.Isunique))))
        && ((__isset.model_name == other.__isset.model_name) && ((!__isset.model_name) || (global::System.Object.Equals(Model_name, other.Model_name))))
        && ((__isset.flytime == other.__isset.flytime) && ((!__isset.flytime) || (global::System.Object.Equals(Flytime, other.Flytime))))
        && ((__isset.isdestroy == other.__isset.isdestroy) && ((!__isset.isdestroy) || (global::System.Object.Equals(Isdestroy, other.Isdestroy))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Id.GetHashCode();
        if((SkuNo != null) && __isset.skuNo)
        {
          hashcode = (hashcode * 397) + SkuNo.GetHashCode();
        }
        if(__isset.lanter_type)
        {
          hashcode = (hashcode * 397) + Lanter_type.GetHashCode();
        }
        if(__isset.isunique)
        {
          hashcode = (hashcode * 397) + Isunique.GetHashCode();
        }
        if((Model_name != null) && __isset.model_name)
        {
          hashcode = (hashcode * 397) + Model_name.GetHashCode();
        }
        if(__isset.flytime)
        {
          hashcode = (hashcode * 397) + Flytime.GetHashCode();
        }
        if(__isset.isdestroy)
        {
          hashcode = (hashcode * 397) + Isdestroy.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp3 = new StringBuilder("TestThrift(");
      tmp3.Append(", Id: ");
      Id.ToString(tmp3);
      if((SkuNo != null) && __isset.skuNo)
      {
        tmp3.Append(", SkuNo: ");
        SkuNo.ToString(tmp3);
      }
      if(__isset.lanter_type)
      {
        tmp3.Append(", Lanter_type: ");
        Lanter_type.ToString(tmp3);
      }
      if(__isset.isunique)
      {
        tmp3.Append(", Isunique: ");
        Isunique.ToString(tmp3);
      }
      if((Model_name != null) && __isset.model_name)
      {
        tmp3.Append(", Model_name: ");
        Model_name.ToString(tmp3);
      }
      if(__isset.flytime)
      {
        tmp3.Append(", Flytime: ");
        Flytime.ToString(tmp3);
      }
      if(__isset.isdestroy)
      {
        tmp3.Append(", Isdestroy: ");
        Isdestroy.ToString(tmp3);
      }
      tmp3.Append(')');
      return tmp3.ToString();
    }
  }

}
