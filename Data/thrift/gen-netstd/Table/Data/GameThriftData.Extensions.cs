/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Table.Data
{
  public static class GameThriftDataExtensions
  {
    public static bool Equals(this List<global::Table.Data.TestThrift> instance, object that)
    {
      if (!(that is List<global::Table.Data.TestThrift> other)) return false;
      if (ReferenceEquals(instance, other)) return true;

      return TCollections.Equals(instance, other);
    }


    public static int GetHashCode(this List<global::Table.Data.TestThrift> instance)
    {
      return TCollections.GetHashCode(instance);
    }


    public static List<global::Table.Data.TestThrift> DeepCopy(this List<global::Table.Data.TestThrift> source)
    {
      if (source == null)
        return null;

      var tmp14 = new List<global::Table.Data.TestThrift>(source.Count);
      foreach (var elem in source)
        tmp14.Add((elem != null) ? elem.DeepCopy() : null);
      return tmp14;
    }


  }
}
