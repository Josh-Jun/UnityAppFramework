/*
*Autogenerated by Thrift Compiler (0.12.0)
*DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Thrift;
using Thrift.Protocol;
using Thrift.Collections;
using Thrift.Transport;
using System.Runtime.Serialization;

namespace Table.Data
{
#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class TestThrift : TBase
    {
        private string _skuNo;
        private int _lanter_type;
        private int _isunique;
        private string _model_name;
        private int _flytime;
        private int _isdestroy;

        public int Id { get; set; }

        public string SkuNo
        {
            get { return _skuNo; }
            set
            {
                __isset.skuNo = true;
                this._skuNo = value;
            }
        }

        public int Lanter_type
        {
            get { return _lanter_type; }
            set
            {
                __isset.lanter_type = true;
                this._lanter_type = value;
            }
        }

        public int Isunique
        {
            get { return _isunique; }
            set
            {
                __isset.isunique = true;
                this._isunique = value;
            }
        }

        public string Model_name
        {
            get { return _model_name; }
            set
            {
                __isset.model_name = true;
                this._model_name = value;
            }
        }

        public int Flytime
        {
            get { return _flytime; }
            set
            {
                __isset.flytime = true;
                this._flytime = value;
            }
        }

        public int Isdestroy
        {
            get { return _isdestroy; }
            set
            {
                __isset.isdestroy = true;
                this._isdestroy = value;
            }
        }

        public Isset __isset;
#if !SILVERLIGHT
        [Serializable]
#endif
        public struct Isset
        {
            public bool skuNo;
            public bool lanter_type;
            public bool isunique;
            public bool model_name;
            public bool flytime;
            public bool isdestroy;
        }

        public TestThrift()
        {
        }

        public TestThrift(int id) : this()
        {
            this.Id = id;
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_id = false;

                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                        break;

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I32)
                            {
                                Id = iprot.ReadI32();
                                isset_id = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }

                            break;

                        case 2:
                            if (field.Type == TType.String)
                            {
                                SkuNo = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }

                            break;

                        case 3:
                            if (field.Type == TType.I32)
                            {
                                Lanter_type = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }

                            break;

                        case 4:
                            if (field.Type == TType.I32)
                            {
                                Isunique = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }

                            break;

                        case 5:
                            if (field.Type == TType.String)
                            {
                                Model_name = iprot.ReadString();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }

                            break;

                        case 6:
                            if (field.Type == TType.I32)
                            {
                                Flytime = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }

                            break;

                        case 7:
                            if (field.Type == TType.I32)
                            {
                                Isdestroy = iprot.ReadI32();
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }

                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }

                    iprot.ReadFieldEnd();
                }

                iprot.ReadStructEnd();

                if (!isset_id)
                    throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Id not set");
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("TestThrift");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                field.Name = "id";
                field.Type = TType.I32;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteI32(Id);
                oprot.WriteFieldEnd();

                if (SkuNo != null && __isset.skuNo)
                {
                    field.Name = "skuNo";
                    field.Type = TType.String;
                    field.ID = 2;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(SkuNo);
                    oprot.WriteFieldEnd();
                }

                if (__isset.lanter_type)
                {
                    field.Name = "lanter_type";
                    field.Type = TType.I32;
                    field.ID = 3;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Lanter_type);
                    oprot.WriteFieldEnd();
                }

                if (__isset.isunique)
                {
                    field.Name = "isunique";
                    field.Type = TType.I32;
                    field.ID = 4;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Isunique);
                    oprot.WriteFieldEnd();
                }

                if (Model_name != null && __isset.model_name)
                {
                    field.Name = "model_name";
                    field.Type = TType.String;
                    field.ID = 5;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteString(Model_name);
                    oprot.WriteFieldEnd();
                }

                if (__isset.flytime)
                {
                    field.Name = "flytime";
                    field.Type = TType.I32;
                    field.ID = 6;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Flytime);
                    oprot.WriteFieldEnd();
                }

                if (__isset.isdestroy)
                {
                    field.Name = "isdestroy";
                    field.Type = TType.I32;
                    field.ID = 7;
                    oprot.WriteFieldBegin(field);
                    oprot.WriteI32(Isdestroy);
                    oprot.WriteFieldEnd();
                }

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            return "";
        }
    }

#if !SILVERLIGHT
    [Serializable]
#endif
    public partial class TestThriftTable : TBase
    {
        public List<TestThrift> Data { get; set; }

        public TestThriftTable()
        {
        }

        public TestThriftTable(List<TestThrift> data) : this()
        {
            this.Data = data;
        }

        public void Read(TProtocol iprot)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                bool isset_data = false;

                TField field;
                iprot.ReadStructBegin();
                while (true)
                {
                    field = iprot.ReadFieldBegin();
                    if (field.Type == TType.Stop)
                        break;

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.List)
                            {
                                Data = new List<TestThrift>();
                                TList _list0 = iprot.ReadListBegin();
                                for (int _i1 = 0; _i1 < _list0.Count; ++_i1)
                                {
                                    TestThrift _elem2;
                                    _elem2 = new TestThrift();
                                    _elem2.Read(iprot);
                                    Data.Add(_elem2);
                                }

                                iprot.ReadListEnd();
                                isset_data = true;
                            }
                            else
                            {
                                TProtocolUtil.Skip(iprot, field.Type);
                            }

                            break;

                        default:
                            TProtocolUtil.Skip(iprot, field.Type);
                            break;
                    }

                    iprot.ReadFieldEnd();
                }

                iprot.ReadStructEnd();

                if (!isset_data)
                    throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Data not set");
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public void Write(TProtocol oprot)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                TStruct struc = new TStruct("TestThriftTable");
                oprot.WriteStructBegin(struc);
                TField field = new TField();

                if (Data == null)
                    throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Data not set");
                field.Name = "data";
                field.Type = TType.List;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.Struct, Data.Count));
                    foreach (TestThrift _iter10 in Data)
                    {
                        _iter10.Write(oprot);
                    }

                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();

                oprot.WriteFieldStop();
                oprot.WriteStructEnd();
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override string ToString()
        {
            return "";
        }
    }
}